@page "/"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using UCMaps.Components.Markers

<style>
    /* Style to make the map fill the entire viewport */

    /* Style for button container */
    .button-container {
        position: absolute;
        bottom: 10px;
        right: 10px;
        z-index: 1000;
    }

    .bi.bi-plus {
        font-size: 2rem; /* Adjust the size as needed */
        color: white; /* Color of the plus icon */
    }

    /* Style for the blue circle */
    .plus-icon-container {
        width: 50px; /* Adjust the size of the circle */
        height: 50px; /* Adjust the size of the circle */
        background-color: blue; /* Color of the circle */
        border-radius: 50%; /* Make it a circle */
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
    }
    /* Show animation */
        .plus-icon-container.show {
            bottom: 0%;
    }

    /* Hide animation */
        .plus-icon-container.hide {
            bottom: -100%;
    }
    /* Style for the button */
    .add-marker-component {
        position: fixed;
        bottom: 10px;
        right: 10px;
        z-index: 1000;
    }

        .add-marker-component i {
            font-size: 2rem;
            color: white;
        }

    /* Style for the container */
    .add-marker-container {
        position: fixed;
        bottom: -100%; /* Initially hides the container */
        right: 0;
        left: 0;
        z-index: 999;
        transition: bottom 0.5s ease; /* Smooth transition when showing/hiding */
    }

        /* Show animation */
        .add-marker-container.show {
            bottom: 0;
        }

        /* Hide animation */
        .add-marker-container.hide {
            bottom: -100%;
        }

    /* Style for the content */
    .add-marker-content {
        padding: 20px;
    }
</style>

<body>
    <!-- Container for the map -->
    <GoogleMap Height="100vh" @ref="@map1" Id="map1" Options="@mapOptions" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>

    <!-- Button container -->
        <!-- Use a conditional to show the input field only when adding a marker -->
    <div class="add-marker-component plus-icon-container @($"{(showLabelInput ? "hide" : "side")}")" @onclick="ToggleLabelInput">
        <i class="bi bi-plus"></i>
    </div>


    <div class="add-marker-container @($"{(showLabelInput ? "show" : "hide")}")">
        <div class="add-marker-content">
            <AddMarkerComponent ShowInput="@showLabelInput" OnConfirm="AddMarker"></AddMarkerComponent>
        </div>
    </div>

    <!-- Other content -->
</body>



<script>
    function callBlazorMethod(ucmarkerJson) {
        DotNet.invokeMethodAsync('UCMaps', 'OnMarkerLabelChange', ucmarkerJson);
    }
</script>



@code {
    private GoogleMap map1;

    private MapOptions mapOptions;

    private List<String> _events = new List<String>();

    private bool DisablePoiInfoWindow { get; set; } = false;
    private bool showLabelInput = false;
    private bool confirmDrag = false;
    private bool showMarkerComponent = false;

    private Stack<Marker> markers = new Stack<Marker>();
    private string labelText = "";
    private string selectedMarkerName = "";

    private const string BaseUrl = "https://localhost:7165/api/Marker";

    protected override void OnInitialized()
    {
        mapOptions = new MapOptions()
            {
                Zoom = 13,
                Center = new LatLngLiteral()
                {
                    Lat = 13.505892,
                    Lng = 100.8162
                },
                MapTypeId = MapTypeId.Roadmap,
                ZoomControl = false,
                DisableDefaultUI = true
            };

    }

    private async Task OnAfterInitAsync()
    {
        using (var client = new HttpClient())
        {
            var responseData = await client.GetFromJsonAsync<List<UCMarker>>(BaseUrl);

            if (responseData != null)
            {
                foreach (var ucMarker in responseData)
                {
                    // Process each UCMarker object here
                    // For example, you can call the AddMarker method passing each UCMarker
                    await AddMarkerFromDB(ucMarker);
                }
            }
        }
    }

    private void ToggleLabelInput()
    {
        // Toggle the flag to show/hide the label input field
        showLabelInput = true;
    }

    private async Task AddMarker(string label)
    {
        // Use the label parameter instead of prompting the user
        // string label = await GetUserInputLabel("Enter label for the marker:");

        var marker = await Marker.CreateAsync(map1.JsRuntime,
            new MarkerOptions()
                {
                    Position = await map1.InteropObject.GetCenter(),
                    Map = map1.InteropObject,
                    Label = new MarkerLabel { Text = label, FontWeight = "bold" },
                    Draggable = true,
                    Icon = new Icon()
                    {
                        Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                    }
                });

        var Center = await map1.InteropObject.GetCenter();

        UCMarker newMarker = new UCMarker
            {
                Name = label,
                Lat = Center.Lat,
                Lng = Center.Lng
            };

        using (var client = new HttpClient())
        {
            var response = await client.PostAsJsonAsync(BaseUrl, newMarker);
            var responseData = await response.Content.ReadFromJsonAsync<UCMarker>();
            if (responseData != null)
            {
                newMarker = responseData;
            }
        }

        markers.Push(marker);
        labelText = await marker.GetLabelText();
        showLabelInput = false;

        await marker.AddListener<MouseEvent>("click", async e =>
        {
            string markerLabelText = await marker.GetLabelText();
            showMarkerComponent = true;
            selectedMarkerName = label;
            StateHasChanged();
            await e.Stop();
        });
        await marker.AddListener<MouseEvent>("dragend", async e =>
        {
            await OnMakerDragEnd(marker, e, newMarker);
            // Make the marker undraggable after it's dragged once
            showLabelInput = true;
        });
    }


    private async Task AddMarkerFromDB(UCMarker ucmarker)
    {
        LatLngLiteral position = new LatLngLiteral { Lat = ucmarker.Lat, Lng = ucmarker.Lng };

        var marker = await Marker.CreateAsync(map1.JsRuntime,
            new MarkerOptions()
                {
                    Position = position,
                    Map = map1.InteropObject,
                    Label = new MarkerLabel { Text = ucmarker.Name, FontWeight = "bold" },
                    Draggable = false,
                    Icon = new Icon()
                    {
                        Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                    }
                    //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                });


        //await marker.SetMap(map1);

        //var map = await marker.GetMap();

        var icon = await marker.GetIcon();

        Console.WriteLine($"Get icon result type is : {icon.Value.GetType()}");

        icon.Switch(
            s => Console.WriteLine(s),
            i => Console.WriteLine(i.Url),
            _ => { });

        //if (map == map1.InteropObject)
        //{
        //    Console.WriteLine("Yess");
        //}
        //else
        //{
        //    Console.WriteLine("Nooo");
        //}

        markers.Push(marker);
        labelText = await marker.GetLabelText();

        await marker.AddListener<MouseEvent>("click", async e =>
        {
            showMarkerComponent = true;
            selectedMarkerName = ucmarker.Name;
            StateHasChanged();
            await e.Stop();
        });
        //await marker.AddListener<MouseEvent>("dragend", async e => await OnMakerDragEnd(marker, e, ucmarker));
    }

    // Define a C# method to serialize the UCMarker object to JSON
    string SerializeUCMarkerToJSON(UCMarker ucmarker)
    {
        return System.Text.Json.JsonSerializer.Serialize(ucmarker);
    }

    [JSInvokable]
    public async Task OnMarkerLabelChange(UCMarker ucmarker)
    {
        UCMarker updateMarker = new UCMarker
            {
                Id = ucmarker.Id,
                Name = ucmarker.Name, // You can set the Name to any value you want
                Lat = ucmarker.Lat,
                Lng = ucmarker.Lng
            };
        using (var client = new HttpClient())
        {
            var response = await client.PutAsJsonAsync(BaseUrl, updateMarker);
            var responseData = await response.Content.ReadFromJsonAsync<UCMarker>();
        }
        StateHasChanged();
    }


    private async Task OnMakerDragEnd(Marker M, MouseEvent e, UCMarker ucmarker)
    {
        string markerLabelText = await M.GetLabelText();
        _events.Insert(0, $"OnMakerDragEnd ({markerLabelText}): ({e.LatLng}).");
        UCMarker updateMarker = new UCMarker
            {
                Id = ucmarker.Id,
                Name = ucmarker.Name, // You can set the Name to any value you want
                Lat = e.LatLng.Lat,
                Lng = e.LatLng.Lng
            };
        using (var client = new HttpClient())
        {
            var response = await client.PutAsJsonAsync(BaseUrl, updateMarker);
            var responseData = await response.Content.ReadFromJsonAsync<UCMarker>();
        }
        StateHasChanged();
        await e.Stop();
    }

    private async Task RemoveMarker()
    {
        if (!markers.Any())
        {
            return;
        }

        var lastMarker = markers.Pop();
        await lastMarker.SetMap(null);
        labelText = markers.Any() ? await markers.Peek().GetLabelText() : "";
    }


}
