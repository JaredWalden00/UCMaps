@inherits LayoutComponentBase
@inject HttpClient httpClient
@inject NavigationManager NavManager
@using Components.Models.DTO
@using Newtonsoft.Json
@using Components.Models
@using UCMaps
@using System.IdentityModel.Tokens.Jwt
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims

<h3>Login</h3>

<EditForm Model="user" OnSubmit="HandleLogin">
    <div class="row">
        <label for="username">Name</label>
        <InputText id="username" @bind-Value="username" />
    </div>
    <div class="row">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="password" type="password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

<p style="color: white;">Don't have an account? <a href="/register" style="color: white;">Register</a></p>

@code {
    private UserLoginDto user = new UserLoginDto();
    private string username { get; set; } = string.Empty;
    private string password { get; set; } = string.Empty;
    [Parameter]
    public EventCallback OnLoginSuccess { get; set; }

    public async Task<ServiceResponse<string>> HandleLogin()
    {
        var userLoginDto = new UserLoginDto { Username = username, Password = password };
        var response = await httpClient.PostAsJsonAsync("http://localhost:5078/Auth/Login", userLoginDto);
        var content = await response.Content.ReadAsStringAsync();
        var serviceResponse = JsonConvert.DeserializeObject<ServiceResponse<string>>(content);

        if (serviceResponse.Success)
        {
            var getUserSession = GetUserClaims(serviceResponse.Data);

            var customAuthStateProvider = (CustomAuthStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(getUserSession);
            await OnLoginSuccess.InvokeAsync();
        }

        return serviceResponse;
    }
    private UserSession GetUserClaims(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var readToken = handler.ReadJwtToken(token);
        var claims = readToken.Claims;
        // var payload = token.Split('.')[1];
        // var jsonBytes = ParseBase64WithoutPadding(payload);
        // var keyValuePairs = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(jsonBytes);

        // var fart = keyValuePairs.Select(kvp => new Claim(kvp.Key, kvp.Value.ToString()));
        var usernameClaim = claims.FirstOrDefault(_ => _.Type == "unique_name") ?? claims.FirstOrDefault(_ => _.Type == ClaimTypes.Name);

        if (usernameClaim == null)
        {
            throw new Exception("Username claim not found");
        }

        return new UserSession()
            {
                Username = usernameClaim.Value,
                Token = token
            };

    }
    private static byte[] ParseBase64WithoutPadding(string base64)
    {
       switch (base64.Length % 4)
       {
           case 2: base64 += "=="; break;
           case 3: base64 += "="; break;
       }
       return Convert.FromBase64String(base64);
    }
}
